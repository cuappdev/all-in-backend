TODO Features/Bugs:

1. Factory Creation - Cindy
- Right now, we have no tests (the current tests are kinda useless and can be deleted)
- The first step for testing is to create factories for each model (user, player, contract, etc)
- The factories will allow us to easily create mock data to be used anywhere in ours tests
- Create factories using Java Faker to generate random data

2. Image Processor Utilities - Sophie
- Frontend requires images to always be a specific height and width along with other manipulations we may come across
- Create an image processor utility in the utils folder that will be able to handle all operations we may need to do on images
- Add any functionality you think may be useful in the future, but at the very least add a cropping/scaling utility

3. Authentication - Stefanie
- We need to have users that will have to be authenticated
- We will use Firebase to authenticate (Google SSO)
- As a result, we will need to refactor our current User model as well as create a UserSession model
- Above is the first step, we can talk after for next steps

4. Enums - Sophie
- A little bit of a simpler task
- Convention is that enums are always capitalized
- Refactor all the uses of enums to capitalize them in both the definitions and when they are referenced

5. Player Scraper - Joshua
- We need to be able to scrape data about players for every sport we choose to support on the app
- Currently, everything is hard-coded
- Create the scraper to get the data using JSoup (there is an example in PopulatePlayerData.java)

6. Opposing Team Scraper - Skye
- Similar to above, we need to scrape data about the opposing team
- Create the scraper

7. Game Scraper - Ashley
- Similar to above, we need to scrape data about the games we will be playing
- Create the scraper

8. Abstract Contract Class - Kevin
- Currently, our contracts only work for basketball
- Abstract the logic of the contract generation algorithm to work given any stat given any sport

9. Expired Contracts Microservice - Cassidy
- Create a microservice to archive all expired contracts
- Must also pay out the value of the contract to users if the contract hit
- Will periodically go through the contracts database to find expired contracts

10. Validate Requests - Daniel
- When frontend sends us a request, we must validate that it provides all the required information and that it is of the correct form
- Create a middleware that checks each request if it has the necessary info for each route

11. Pagination - Daisy
- Pagination is essentially limiting the amount of data we send to frontend so that we don't send huge JSON files
- For example, frontend will tell us the number of contracts they want as a query parameter in the URL
- We will respond with that amount
- Default response with no pagination query param will be all of them, but our routes should be able to handle pagination

12. Authorization
- Dependent on authentication
- Will discuss more when authentication is finished


Things to ask the entire team:
Rarity thresholds
How contracts work
Starting money and how much contracts cost
